(* complex_python.yal - Analizador léxico para Python *)
{
import myToken
}

(* Definición de tokens *)
let digit = ['0'-'9']
let letter = ['a'-'z' 'A'-'Z' '_']
let id = letter (letter | digit)*
let number = digit+
let float = digit+ '.' digit+
let string = '"' (_ # '"')* '"' | "'" (_ # "'")* "'"
let triple_string = '"""' (_ # '"""')* '"""' | "'''" (_ # "'''")* "'''"
let comment = '#' (_ # '\n')*

(* Palabras clave en Python *)
let keyword = 'if' | 'else' | 'elif' | 'while' | 'for' | 'def' | 'return' | 'import' | 'from' | 
              'as' | 'class' | 'self' | 'None' | 'True' | 'False' | 'and' | 'or' | 'not' |
              'try' | 'except' | 'finally' | 'with' | 'yield' | 'lambda' | 'global' | 'assert' | 'del' |
              'raise' | 'break' | 'continue' | 'pass'

(* Operadores y símbolos de Python *)
rule gettoken =
  [' ' '\t'] { return lexbuf }  (* Ignorar espacios en blanco *)
| '\n' { return EOL }           (* Saltos de línea *)
| comment { return lexbuf }      (* Ignorar comentarios *)
| keyword { return KEYWORD }
| number { return INT }
| float { return FLOAT }
| string { return STRING }
| triple_string { return STRING }
| '+' { return PLUS }
| '-' { return MINUS }
| '*' { return TIMES }
| '**' { return POWER }
| '/' { return DIV }
| '//' { return FLOOR_DIV }
| '%' { return MOD }
| '=' { return ASSIGN }
| '==' { return EQ }
| '!=' { return NE }
| '<' { return LT }
| '>' { return GT }
| '<=' { return LE }
| '>=' { return GE }
| '(' { return LPAREN }
| ')' { return RPAREN }
| '[' { return LBRACKET }
| ']' { return RBRACKET }
| '{' { return LBRACE }
| '}' { return RBRACE }
| ':' { return COLON }
| ',' { return COMMA }
| '.' { return DOT }
| 'and' { return AND }
| 'or' { return OR }
| 'not' { return NOT }
| id { return IDENTIFIER }
| eof { raise('Fin de buffer') }
| . { raise('Error léxico: Caracter no reconocido' + lxm) }